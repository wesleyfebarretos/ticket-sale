// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin_products_query.sql

package admin_products_repository

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO products 
(name, description, price, discount_price, active, image, image_mobile, image_thumbnail, category_id, created_by)
VALUES 
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
RETURNING id, name, description, uuid, price, discount_price, active, is_deleted, image, image_mobile, image_thumbnail, category_id, created_by, updated_by, created_at, updated_at
`

type CreateParams struct {
	Name           string   `json:"name"`
	Description    *string  `json:"description"`
	Price          float64  `json:"price"`
	DiscountPrice  *float64 `json:"discountPrice"`
	Active         bool     `json:"active"`
	Image          *string  `json:"image"`
	ImageMobile    *string  `json:"imageMobile"`
	ImageThumbnail *string  `json:"imageThumbnail"`
	CategoryID     int32    `json:"categoryId"`
	CreatedBy      int32    `json:"createdBy"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Product, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.DiscountPrice,
		arg.Active,
		arg.Image,
		arg.ImageMobile,
		arg.ImageThumbnail,
		arg.CategoryID,
		arg.CreatedBy,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Uuid,
		&i.Price,
		&i.DiscountPrice,
		&i.Active,
		&i.IsDeleted,
		&i.Image,
		&i.ImageMobile,
		&i.ImageThumbnail,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWithStock = `-- name: CreateWithStock :one
BEGIN
`

type CreateWithStockRow struct {
}

func (q *Queries) CreateWithStock(ctx context.Context) (CreateWithStockRow, error) {
	row := q.db.QueryRow(ctx, createWithStock)
	var i CreateWithStockRow
	err := row.Scan()
	return i, err
}

const deleteAllProductInstallmentTimes = `-- name: DeleteAllProductInstallmentTimes :exec
DELETE FROM
    fin.product_payment_type_installment_time
WHERE
    product_id = $1
`

func (q *Queries) DeleteAllProductInstallmentTimes(ctx context.Context, productID int32) error {
	_, err := q.db.Exec(ctx, deleteAllProductInstallmentTimes, productID)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name, description, uuid, price, discount_price, active, is_deleted, image, image_mobile, image_thumbnail, category_id, created_by, updated_by, created_at, updated_at FROM products 
WHERE 
    is_deleted IS FALSE 
AND
    active IS TRUE
ORDER BY 
    created_at DESC
`

func (q *Queries) GetAll(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Uuid,
			&i.Price,
			&i.DiscountPrice,
			&i.Active,
			&i.IsDeleted,
			&i.Image,
			&i.ImageMobile,
			&i.ImageThumbnail,
			&i.CategoryID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductInstallmentTimes = `-- name: GetAllProductInstallmentTimes :many
SELECT 
    id,
    fee,
    tariff,
    payment_type_id,
    installment_time_id
FROM 
    fin.product_payment_type_installment_time
WHERE
    product_id = $1
`

type GetAllProductInstallmentTimesRow struct {
	ID                int32   `json:"id"`
	Fee               float64 `json:"fee"`
	Tariff            float64 `json:"tariff"`
	PaymentTypeID     int32   `json:"paymentTypeId"`
	InstallmentTimeID int32   `json:"installmentTimeId"`
}

func (q *Queries) GetAllProductInstallmentTimes(ctx context.Context, productID int32) ([]GetAllProductInstallmentTimesRow, error) {
	rows, err := q.db.Query(ctx, getAllProductInstallmentTimes, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllProductInstallmentTimesRow{}
	for rows.Next() {
		var i GetAllProductInstallmentTimesRow
		if err := rows.Scan(
			&i.ID,
			&i.Fee,
			&i.Tariff,
			&i.PaymentTypeID,
			&i.InstallmentTimeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductsDetails = `-- name: GetAllProductsDetails :many
SELECT id, name, description, uuid, price, discount_price, active, is_deleted, image, image_mobile, image_thumbnail, category_id, created_by, updated_by, created_at, updated_at, stock, category, installments FROM products_details
WHERE 
    is_deleted IS FALSE 
AND
    active IS TRUE
ORDER BY 
    created_at DESC
`

func (q *Queries) GetAllProductsDetails(ctx context.Context) ([]ProductsDetail, error) {
	rows, err := q.db.Query(ctx, getAllProductsDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductsDetail{}
	for rows.Next() {
		var i ProductsDetail
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Uuid,
			&i.Price,
			&i.DiscountPrice,
			&i.Active,
			&i.IsDeleted,
			&i.Image,
			&i.ImageMobile,
			&i.ImageThumbnail,
			&i.CategoryID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Stock,
			&i.Category,
			&i.Installments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneById = `-- name: GetOneById :one
SELECT id, name, description, uuid, price, discount_price, active, is_deleted, image, image_mobile, image_thumbnail, category_id, created_by, updated_by, created_at, updated_at, stock, category, installments FROM products_details
WHERE 
    id = $1
LIMIT 1
`

func (q *Queries) GetOneById(ctx context.Context, id int32) (ProductsDetail, error) {
	row := q.db.QueryRow(ctx, getOneById, id)
	var i ProductsDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Uuid,
		&i.Price,
		&i.DiscountPrice,
		&i.Active,
		&i.IsDeleted,
		&i.Image,
		&i.ImageMobile,
		&i.ImageThumbnail,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Stock,
		&i.Category,
		&i.Installments,
	)
	return i, err
}

const getOneByUuid = `-- name: GetOneByUuid :one
SELECT id, name, description, uuid, price, discount_price, active, is_deleted, image, image_mobile, image_thumbnail, category_id, created_by, updated_by, created_at, updated_at, stock, category, installments FROM products_details
WHERE 
    uuid = $1
LIMIT 1
`

func (q *Queries) GetOneByUuid(ctx context.Context, argUuid uuid.UUID) (ProductsDetail, error) {
	row := q.db.QueryRow(ctx, getOneByUuid, argUuid)
	var i ProductsDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Uuid,
		&i.Price,
		&i.DiscountPrice,
		&i.Active,
		&i.IsDeleted,
		&i.Image,
		&i.ImageMobile,
		&i.ImageThumbnail,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Stock,
		&i.Category,
		&i.Installments,
	)
	return i, err
}

const softDelete = `-- name: SoftDelete :exec
UPDATE products SET
    is_deleted = true,
    updated_by = $2
WHERE 
    id = $1
AND 
    is_deleted IS FALSE
`

type SoftDeleteParams struct {
	ID        int32  `json:"id"`
	UpdatedBy *int32 `json:"updatedBy"`
}

func (q *Queries) SoftDelete(ctx context.Context, arg SoftDeleteParams) error {
	_, err := q.db.Exec(ctx, softDelete, arg.ID, arg.UpdatedBy)
	return err
}

const update = `-- name: Update :exec
UPDATE products SET
    name = $1,
    description = $2,
    price = $3,
    discount_price = $4,
    active = $5,
    image = $6,
    image_mobile = $7,
    image_thumbnail = $8,
    category_id = $9,
    updated_by = $10
WHERE 
    id = $11
`

type UpdateParams struct {
	Name           string   `json:"name"`
	Description    *string  `json:"description"`
	Price          float64  `json:"price"`
	DiscountPrice  *float64 `json:"discountPrice"`
	Active         bool     `json:"active"`
	Image          *string  `json:"image"`
	ImageMobile    *string  `json:"imageMobile"`
	ImageThumbnail *string  `json:"imageThumbnail"`
	CategoryID     int32    `json:"categoryId"`
	UpdatedBy      *int32   `json:"updatedBy"`
	ID             int32    `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.DiscountPrice,
		arg.Active,
		arg.Image,
		arg.ImageMobile,
		arg.ImageThumbnail,
		arg.CategoryID,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
