// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin_product_stocks_query.sql

package admin_product_stocks_repository

import (
	"context"
	"time"
)

const create = `-- name: Create :one
INSERT INTO product_stocks
    (product_id, qty, min_qty, created_by)
VALUES
    ($1,$2,$3,$4)
RETURNING id, product_id, qty, min_qty, created_by, updated_by, created_at, updated_at
`

type CreateParams struct {
	ProductID int32  `json:"productId"`
	Qty       int32  `json:"qty"`
	MinQty    *int32 `json:"minQty"`
	CreatedBy int32  `json:"createdBy"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (ProductStock, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ProductID,
		arg.Qty,
		arg.MinQty,
		arg.CreatedBy,
	)
	var i ProductStock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Qty,
		&i.MinQty,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE product_stocks SET
    qty = $1,
    min_qty = $2,
    updated_by = $3,
    updated_at = $4
WHERE
    id = $5
`

type UpdateParams struct {
	Qty       int32     `json:"qty"`
	MinQty    *int32    `json:"minQty"`
	UpdatedBy *int32    `json:"updatedBy"`
	UpdatedAt time.Time `json:"updatedAt"`
	ID        int32     `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Qty,
		arg.MinQty,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
