// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin_events_query.sql

package admin_events_repository

import (
	"context"
	"time"
)

const create = `-- name: Create :one
INSERT INTO events
    (product_id, start_at, end_at, city, state, location)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id, product_id, start_at, end_at, city, state, location
`

type CreateParams struct {
	ProductID int32      `json:"productId"`
	StartAt   *time.Time `json:"startAt"`
	EndAt     *time.Time `json:"endAt"`
	City      *string    `json:"city"`
	State     *string    `json:"state"`
	Location  *string    `json:"location"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Event, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ProductID,
		arg.StartAt,
		arg.EndAt,
		arg.City,
		arg.State,
		arg.Location,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.StartAt,
		&i.EndAt,
		&i.City,
		&i.State,
		&i.Location,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE  FROM events WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, product_id, start_at, end_at, city, state, location, product FROM get_all_events
WHERE
    p.is_deleted IS FALSE
`

func (q *Queries) GetAll(ctx context.Context) ([]GetAllEvent, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllEvent{}
	for rows.Next() {
		var i GetAllEvent
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.StartAt,
			&i.EndAt,
			&i.City,
			&i.State,
			&i.Location,
			&i.Product,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE events SET
    start_at = $2,
    end_at = $3,
    city = $4,
    state = $5,
    location = $6
WHERE id = $1
`

type UpdateParams struct {
	ID       int32      `json:"id"`
	StartAt  *time.Time `json:"startAt"`
	EndAt    *time.Time `json:"endAt"`
	City     *string    `json:"city"`
	State    *string    `json:"state"`
	Location *string    `json:"location"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.StartAt,
		arg.EndAt,
		arg.City,
		arg.State,
		arg.Location,
	)
	return err
}
