// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_query.sql

package user_repository

import (
	"context"
	"time"
)

const checkIfEmailExists = `-- name: CheckIfEmailExists :one
SELECT 
    id, first_name, last_name,
    email, role, created_at, updated_at
FROM 
   users
WHERE
   email = $1 AND id != $2 LIMIT 1
`

type CheckIfEmailExistsParams struct {
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

type CheckIfEmailExistsRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) CheckIfEmailExists(ctx context.Context, arg CheckIfEmailExistsParams) (CheckIfEmailExistsRow, error) {
	row := q.db.QueryRow(ctx, checkIfEmailExists, arg.Email, arg.ID)
	var i CheckIfEmailExistsRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const create = `-- name: Create :one
INSERT INTO users 
(first_name, last_name, email, password, role)
VALUES 
($1, $2, $3, $4, $5) 
RETURNING
    id, first_name, last_name,
    email, role, created_at, updated_at
`

type CreateParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	Role      Roles  `json:"role"`
}

type CreateRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (CreateRow, error) {
	row := q.db.QueryRow(ctx, create,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i CreateRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT 
    id, first_name, last_name,
    email, role, created_at, updated_at
FROM 
   users 
WHERE
    role = $1
ORDER BY 
    id
`

type GetAllRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetAll(ctx context.Context, role Roles) ([]GetAllRow, error) {
	rows, err := q.db.Query(ctx, getAll, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllRow{}
	for rows.Next() {
		var i GetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullProfile = `-- name: GetFullProfile :one
SELECT 
    u.id, 
    u.first_name,
    u.last_name,
    u.email,
    u.role,
    u.created_at,
    u.updated_at,
    COALESCE(
        json_agg(
            json_build_object(
                'id', ua.id,
                'userId', ua.user_id,
                'streetAddress', ua.street_address,
                'city', ua.city,
                'complement', ua.complement,
                'state', ua.state,
                'postalCode', ua.postal_code,
                'country', ua.country,
                'addressType', ua.address_type,
                'favorite', ua.favorite
            ) ORDER BY ua.favorite DESC
        ) FILTER (WHERE ua.id IS NOT NULL), '[]'::json
    ) AS addresses
FROM 
    users AS u
LEFT JOIN 
    users_addresses AS ua
ON 
    u.id = ua.user_id
WHERE 
    u.id = $1 
GROUP BY 

	u.id 
LIMIT 1
`

type GetFullProfileRow struct {
	ID        int32       `json:"id"`
	FirstName string      `json:"firstName"`
	LastName  string      `json:"lastName"`
	Email     string      `json:"email"`
	Role      Roles       `json:"role"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt *time.Time  `json:"updatedAt"`
	Addresses interface{} `json:"addresses"`
}

func (q *Queries) GetFullProfile(ctx context.Context, id int32) (GetFullProfileRow, error) {
	row := q.db.QueryRow(ctx, getFullProfile, id)
	var i GetFullProfileRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Addresses,
	)
	return i, err
}

const getOneByEmail = `-- name: GetOneByEmail :one
SELECT 
    id, first_name, last_name,
    email, role, created_at, updated_at
FROM 
   users
WHERE
   email = $1 LIMIT 1
`

type GetOneByEmailRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetOneByEmail(ctx context.Context, email string) (GetOneByEmailRow, error) {
	row := q.db.QueryRow(ctx, getOneByEmail, email)
	var i GetOneByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneByEmailAndRole = `-- name: GetOneByEmailAndRole :one
SELECT 
    id, first_name, last_name,
    email, role, created_at, updated_at
FROM 
   users
WHERE
   email = $1 
AND
    role = $2 
LIMIT 
    1
`

type GetOneByEmailAndRoleParams struct {
	Email string `json:"email"`
	Role  Roles  `json:"role"`
}

type GetOneByEmailAndRoleRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetOneByEmailAndRole(ctx context.Context, arg GetOneByEmailAndRoleParams) (GetOneByEmailAndRoleRow, error) {
	row := q.db.QueryRow(ctx, getOneByEmailAndRole, arg.Email, arg.Role)
	var i GetOneByEmailAndRoleRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneById = `-- name: GetOneById :one
SELECT 
    id, first_name, last_name,
    email, role, created_at, updated_at
FROM
   users WHERE id = $1 LIMIT 1
`

type GetOneByIdRow struct {
	ID        int32      `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Role      Roles      `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetOneById(ctx context.Context, id int32) (GetOneByIdRow, error) {
	row := q.db.QueryRow(ctx, getOneById, id)
	var i GetOneByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneWithPasswordByEmail = `-- name: GetOneWithPasswordByEmail :one
SELECT 
    id, password, role, email, first_name, last_name, created_at, updated_at
FROM 
   users
WHERE
   email = $1 LIMIT 1
`

type GetOneWithPasswordByEmailRow struct {
	ID        int32      `json:"id"`
	Password  string     `json:"password"`
	Role      Roles      `json:"role"`
	Email     string     `json:"email"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetOneWithPasswordByEmail(ctx context.Context, email string) (GetOneWithPasswordByEmailRow, error) {
	row := q.db.QueryRow(ctx, getOneWithPasswordByEmail, email)
	var i GetOneWithPasswordByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Role,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE users 
SET 
    first_name = $2,
    last_name = $3,
    email = $4,
    role = $5
WHERE id = $1
`

type UpdateParams struct {
	ID        int32  `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Role      Roles  `json:"role"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Role,
	)
	return err
}
