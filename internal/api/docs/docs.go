// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Ticket Sale Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/auth": {
            "post": {
                "description": "Sign In",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Sign In",
                "parameters": [
                    {
                        "description": "Sign In",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_auth_controller.SignInRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_auth_controller.SignInResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    }
                }
            }
        },
        "/admin/events": {
            "get": {
                "description": "Get all events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Event"
                ],
                "summary": "Get all events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin_event_controller.GetAllResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Event"
                ],
                "summary": "Create a event",
                "parameters": [
                    {
                        "description": "New Event",
                        "name": "Event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_event_controller.CreateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/admin_event_controller.CreateResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/events/{id}": {
            "get": {
                "description": "Get One By Id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Event"
                ],
                "summary": "Get One By Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_event_controller.GetOneByIdResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Event"
                ],
                "summary": "Update a event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Event",
                        "name": "Event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_event_controller.UpdateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft Delete a event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Event"
                ],
                "summary": "Soft Delete a event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "description": "Get all products",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin_product_controller.GetAllResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a product",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Create a product",
                "parameters": [
                    {
                        "description": "New product",
                        "name": "Product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_product_controller.CreateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/admin_product_controller.CreateResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/products/details": {
            "get": {
                "description": "Get all products with relations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Get all products with relations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin_product_controller.GetAllWithRelationsResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/products/uuid/{uuid}": {
            "get": {
                "description": "Get One By UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Get One By UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_product_controller.GetOneByUuidResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/products/{id}": {
            "get": {
                "description": "Get One By Id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Get One By Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_product_controller.GetOneByIdResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a product",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update product",
                        "name": "Product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_product_controller.UpdateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft Delete a product",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Product"
                ],
                "summary": "Soft Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "description": "Get All Admin Users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Get All",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin_user_controller.GetAllResponseDto"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an admin user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Create An Admin User",
                "parameters": [
                    {
                        "description": "New Admin User",
                        "name": "AdminUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.CreateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.CreateResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/users/get-by-email": {
            "post": {
                "description": "Get one admin user by email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Get One By Email",
                "parameters": [
                    {
                        "description": "Admin User Email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.GetOneByEmailRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.GetOneByEmailResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "description": "Get one admin user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Get One By Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.GetOneByIdResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an admin user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Update An Admin User",
                "parameters": [
                    {
                        "description": "Update Admin User",
                        "name": "AdminUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_user_controller.UpdateRequestDto"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Admin User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an admin user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Users"
                ],
                "summary": "Delete An Admin User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/auth": {
            "post": {
                "description": "Sign In",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Sign In",
                "parameters": [
                    {
                        "description": "Sign In",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth_controller.SignInRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth_controller.SignInResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get All Users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get All",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user_controller.GetAllResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an new User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create",
                "parameters": [
                    {
                        "description": "Add user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_controller.CreateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/user_controller.CreateResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get one user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get One By Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_controller.GetOneByIdResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update An User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_controller.UpdateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.AuthenticationError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.RolePermissionError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/exception.HttpException"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin_auth_controller.SignInRequestDto": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ticketsale@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "admin_auth_controller.SignInResponseDto": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "expire": {
                    "type": "string",
                    "example": "2024-06-30T20:46:13-03:00"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk3OTExNzMsImlkIjozLCJvcmlnX2lhdCI6MTcxOTcwNDc3Mywicm9sZSI6InVzZXIifQ.c8HuyRAxgNDC4FavwQ_mv-qWOm4Ch6--1-kSQEmK4x0"
                }
            }
        },
        "admin_event_controller.CategoryDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "EVENT"
                },
                "id": {
                    "type": "integer",
                    "example": 3
                },
                "name": {
                    "type": "string",
                    "example": "event"
                }
            }
        },
        "admin_event_controller.CreateRequestDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Orlando"
                },
                "endAt": {
                    "type": "string",
                    "example": "2024-01-10T00:00:00Z"
                },
                "location": {
                    "type": "string",
                    "example": "Disney"
                },
                "product": {
                    "$ref": "#/definitions/admin_product_controller.CreateRequestDto"
                },
                "startAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "state": {
                    "type": "string",
                    "example": "FL"
                }
            }
        },
        "admin_event_controller.CreateResponseDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Orlando"
                },
                "endAt": {
                    "type": "string",
                    "example": "2024-01-10T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "type": "string",
                    "example": "Disney"
                },
                "product": {
                    "$ref": "#/definitions/admin_product_controller.CreateResponseDto"
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "startAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "state": {
                    "type": "string",
                    "example": "FL"
                }
            }
        },
        "admin_event_controller.GetAllProductDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "category": {
                    "$ref": "#/definitions/admin_event_controller.CategoryDto"
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_event_controller.GetAllResponseDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Orlando"
                },
                "endAt": {
                    "type": "string",
                    "example": "2024-01-10T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "type": "string",
                    "example": "Disney"
                },
                "product": {
                    "$ref": "#/definitions/admin_event_controller.GetAllProductDto"
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "startAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "state": {
                    "type": "string",
                    "example": "FL"
                }
            }
        },
        "admin_event_controller.GetOneByIdProductDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "category": {
                    "$ref": "#/definitions/admin_event_controller.CategoryDto"
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "installments": {
                    "$ref": "#/definitions/admin_product_controller.InstallmentsResponseDto"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_event_controller.StockDto"
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_event_controller.GetOneByIdResponseDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Orlando"
                },
                "endAt": {
                    "type": "string",
                    "example": "2024-01-10T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "type": "string",
                    "example": "Disney"
                },
                "product": {
                    "$ref": "#/definitions/admin_event_controller.GetOneByIdProductDto"
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "startAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "state": {
                    "type": "string",
                    "example": "FL"
                }
            }
        },
        "admin_event_controller.StockDto": {
            "type": "object",
            "required": [
                "qty"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "minQty": {
                    "type": "integer",
                    "example": 50
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "qty": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "admin_event_controller.UpdateRequestDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Orlando"
                },
                "endAt": {
                    "type": "string",
                    "example": "2024-01-10T00:00:00Z"
                },
                "location": {
                    "type": "string",
                    "example": "Disney"
                },
                "product": {
                    "$ref": "#/definitions/admin_product_controller.UpdateRequestDto"
                },
                "startAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "state": {
                    "type": "string",
                    "example": "FL"
                }
            }
        },
        "admin_product_controller.CategoryResponseDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "EVENT"
                },
                "id": {
                    "type": "integer",
                    "example": 3
                },
                "name": {
                    "type": "string",
                    "example": "event"
                }
            }
        },
        "admin_product_controller.CreateInstallmentsRequestDto": {
            "type": "object",
            "required": [
                "id",
                "paymentTypeId"
            ],
            "properties": {
                "fee": {
                    "type": "number"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "paymentTypeId": {
                    "type": "integer"
                },
                "tariff": {
                    "type": "number",
                    "example": 2.3
                }
            }
        },
        "admin_product_controller.CreateInstallmentsResponseDto": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "number",
                    "example": 1.5
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "installmentId": {
                    "type": "integer",
                    "example": 1
                },
                "paymentTypeId": {
                    "type": "integer",
                    "example": 1
                },
                "tariff": {
                    "type": "number",
                    "example": 2.3
                }
            }
        },
        "admin_product_controller.CreateRequestDto": {
            "type": "object",
            "required": [
                "categoryId",
                "image",
                "imageMobile",
                "imageThumbnail",
                "installments",
                "name",
                "price"
            ],
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "categoryId": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 3
                },
                "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "image": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "installments": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.CreateInstallmentsRequestDto"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_product_controller.CreateStockRequestDto"
                }
            }
        },
        "admin_product_controller.CreateResponseDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "installments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.CreateInstallmentsResponseDto"
                    }
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_product_controller.CreateStockResponseDto"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_product_controller.CreateStockRequestDto": {
            "type": "object",
            "required": [
                "qty"
            ],
            "properties": {
                "minQty": {
                    "type": "integer",
                    "example": 50
                },
                "qty": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "admin_product_controller.CreateStockResponseDto": {
            "type": "object",
            "required": [
                "qty"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "minQty": {
                    "type": "integer",
                    "example": 50
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "qty": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "admin_product_controller.GetAllResponseDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_product_controller.GetAllWithRelationsResponseDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "category": {
                    "$ref": "#/definitions/admin_product_controller.CategoryResponseDto"
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "installments": {
                    "$ref": "#/definitions/admin_product_controller.InstallmentsResponseDto"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_product_controller.StockResponseDto"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_product_controller.GetOneByIdResponseDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "category": {
                    "$ref": "#/definitions/admin_product_controller.CategoryResponseDto"
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_product_controller.StockResponseDto"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_product_controller.GetOneByUuidResponseDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "category": {
                    "$ref": "#/definitions/admin_product_controller.CategoryResponseDto"
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 4.99
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers.jpg"
                },
                "imageMobile": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.jpg"
                },
                "imageThumbnail": {
                    "type": "string",
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg"
                },
                "isDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 5.99
                },
                "stock": {
                    "$ref": "#/definitions/admin_product_controller.StockResponseDto"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 1
                },
                "uuid": {
                    "type": "string",
                    "example": "998f91f3-4dd7-419d-a543-0d26a0e945ec"
                }
            }
        },
        "admin_product_controller.InstallmentsResponseDto": {
            "type": "object",
            "properties": {
                "creditcard": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.PaymentTypeInstallment"
                    }
                },
                "paymentSlip": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.PaymentTypeInstallment"
                    }
                },
                "pix": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.PaymentTypeInstallment"
                    }
                }
            }
        },
        "admin_product_controller.PaymentTypeInstallment": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "number",
                    "example": 3.22
                },
                "installmentTimeId": {
                    "type": "integer",
                    "example": 1
                },
                "installmentTimeName": {
                    "type": "string",
                    "example": "1x"
                },
                "tariff": {
                    "type": "number",
                    "example": 7
                }
            }
        },
        "admin_product_controller.StockResponseDto": {
            "type": "object",
            "required": [
                "qty"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "minQty": {
                    "type": "integer",
                    "example": 50
                },
                "productId": {
                    "type": "integer",
                    "example": 1
                },
                "qty": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "admin_product_controller.UpdateInstallmentsRequestDto": {
            "type": "object",
            "required": [
                "id",
                "paymentTypeId"
            ],
            "properties": {
                "fee": {
                    "type": "number"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "paymentTypeId": {
                    "type": "integer"
                },
                "tariff": {
                    "type": "number",
                    "example": 2.3
                }
            }
        },
        "admin_product_controller.UpdateRequestDto": {
            "type": "object",
            "required": [
                "categoryId",
                "image",
                "imageMobile",
                "imageThumbnail",
                "installments",
                "name",
                "price"
            ],
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": false
                },
                "categoryId": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "Update Fresh and fiery red hot chilly peppers, perfect for adding a spicy kick to your dishes."
                },
                "discountPrice": {
                    "type": "number",
                    "example": 5.11
                },
                "image": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers.png"
                },
                "imageMobile": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers-mobile.png"
                },
                "imageThumbnail": {
                    "type": "string",
                    "maxLength": 2000,
                    "example": "https://example.com/images/red-hot-chilly-peppers-thumbnail.png"
                },
                "installments": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/admin_product_controller.UpdateInstallmentsRequestDto"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Update Red Hot Chilly Peppers"
                },
                "price": {
                    "type": "number",
                    "example": 6.11
                }
            }
        },
        "admin_user_controller.CreateRequestDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Admin John"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 6,
                    "example": "123456"
                }
            }
        },
        "admin_user_controller.CreateResponseDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                },
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Admin John"
                },
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                }
            }
        },
        "admin_user_controller.GetAllResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                }
            }
        },
        "admin_user_controller.GetOneByEmailRequestDto": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                }
            }
        },
        "admin_user_controller.GetOneByEmailResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                },
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Admin John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                }
            }
        },
        "admin_user_controller.GetOneByIdResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                },
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Admin John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-06-29T06:29:44.999929Z"
                }
            }
        },
        "admin_user_controller.UpdateRequestDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "adminjohndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Admin John"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "webservice"
                    ]
                }
            }
        },
        "auth_controller.SignInRequestDto": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "auth_controller.SignInResponseDto": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "expire": {
                    "type": "string",
                    "example": "2024-06-30T20:46:13-03:00"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk3OTExNzMsImlkIjozLCJvcmlnX2lhdCI6MTcxOTcwNDc3Mywicm9sZSI6InVzZXIifQ.c8HuyRAxgNDC4FavwQ_mv-qWOm4Ch6--1-kSQEmK4x0"
                }
            }
        },
        "exception.HttpException": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid path parameter"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "middleware.AuthenticationError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Access denied"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                }
            }
        },
        "middleware.RolePermissionError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "permission denied."
                },
                "statusCode": {
                    "type": "integer",
                    "example": 403
                }
            }
        },
        "user_controller.AddressRequestDto": {
            "type": "object",
            "properties": {
                "addressType": {
                    "type": "string",
                    "example": "home"
                },
                "city": {
                    "type": "string",
                    "example": "Springfield"
                },
                "complement": {
                    "type": "string",
                    "example": "Apt 101"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "favorite": {
                    "type": "boolean",
                    "example": true
                },
                "postalCode": {
                    "type": "string",
                    "example": "12345"
                },
                "state": {
                    "type": "string",
                    "example": "IL"
                },
                "streetAddress": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-02T00:00:00Z"
                }
            }
        },
        "user_controller.AddressResponseDto": {
            "type": "object",
            "properties": {
                "addressType": {
                    "type": "string",
                    "example": "home"
                },
                "city": {
                    "type": "string",
                    "example": "Springfield"
                },
                "complement": {
                    "type": "string",
                    "example": "Apt 101"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "favorite": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "postalCode": {
                    "type": "string",
                    "example": "12345"
                },
                "state": {
                    "type": "string",
                    "example": "IL"
                },
                "streetAddress": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-02T00:00:00Z"
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "user_controller.CreateRequestDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/user_controller.AddressRequestDto"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "phone": {
                    "$ref": "#/definitions/user_controller.PhoneRequestDto"
                }
            }
        },
        "user_controller.CreateResponseDto": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/user_controller.AddressResponseDto"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "$ref": "#/definitions/user_controller.PhoneResponseDto"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "user_controller.GetAllResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "user_controller.GetOneByIdResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "user_controller.PhoneRequestDto": {
            "type": "object",
            "required": [
                "ddd",
                "number"
            ],
            "properties": {
                "ddd": {
                    "type": "string",
                    "maxLength": 5,
                    "example": "021"
                },
                "number": {
                    "type": "string",
                    "maxLength": 10,
                    "example": "999999999"
                }
            }
        },
        "user_controller.PhoneResponseDto": {
            "type": "object",
            "properties": {
                "ddd": {
                    "type": "string",
                    "example": "021"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "number": {
                    "type": "string",
                    "example": "999999999"
                },
                "userId": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "user_controller.UpdateRequestDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoeupdate@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John Update"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe update"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Ticket Sale",
	Description:      "This is a simple ticket sales application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
