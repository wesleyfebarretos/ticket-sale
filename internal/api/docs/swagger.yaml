basePath: /v1
definitions:
  admin_auth_controller.SignInRequestDto:
    properties:
      email:
        example: ticketsale@gmail.com
        type: string
      password:
        example: "123"
        type: string
    required:
    - email
    - password
    type: object
  admin_auth_controller.SignInResponseDto:
    properties:
      code:
        example: 200
        type: integer
      expire:
        example: "2024-06-30T20:46:13-03:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk3OTExNzMsImlkIjozLCJvcmlnX2lhdCI6MTcxOTcwNDc3Mywicm9sZSI6InVzZXIifQ.c8HuyRAxgNDC4FavwQ_mv-qWOm4Ch6--1-kSQEmK4x0
        type: string
    type: object
  admin_event_controller.CategoryDto:
    properties:
      description:
        example: EVENT
        type: string
      id:
        example: 3
        type: integer
      name:
        example: event
        type: string
    type: object
  admin_event_controller.CreateRequestDto:
    properties:
      city:
        example: Orlando
        type: string
      endAt:
        example: "2024-01-10T00:00:00Z"
        type: string
      location:
        example: Disney
        type: string
      product:
        $ref: '#/definitions/admin_product_controller.CreateRequestDto'
      startAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      state:
        example: FL
        type: string
    type: object
  admin_event_controller.CreateResponseDto:
    properties:
      city:
        example: Orlando
        type: string
      endAt:
        example: "2024-01-10T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      location:
        example: Disney
        type: string
      product:
        $ref: '#/definitions/admin_product_controller.CreateResponseDto'
      productId:
        example: 1
        type: integer
      startAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      state:
        example: FL
        type: string
    type: object
  admin_event_controller.GetAllProductDto:
    properties:
      active:
        example: true
        type: boolean
      category:
        $ref: '#/definitions/admin_event_controller.CategoryDto'
      categoryId:
        example: 3
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_event_controller.GetAllResponseDto:
    properties:
      city:
        example: Orlando
        type: string
      endAt:
        example: "2024-01-10T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      location:
        example: Disney
        type: string
      product:
        $ref: '#/definitions/admin_event_controller.GetAllProductDto'
      productId:
        example: 1
        type: integer
      startAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      state:
        example: FL
        type: string
    type: object
  admin_event_controller.GetOneByIdProductDto:
    properties:
      active:
        example: true
        type: boolean
      category:
        $ref: '#/definitions/admin_event_controller.CategoryDto'
      categoryId:
        example: 3
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      installments:
        $ref: '#/definitions/admin_product_controller.InstallmentsResponseDto'
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_event_controller.StockDto'
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_event_controller.GetOneByIdResponseDto:
    properties:
      city:
        example: Orlando
        type: string
      endAt:
        example: "2024-01-10T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      location:
        example: Disney
        type: string
      product:
        $ref: '#/definitions/admin_event_controller.GetOneByIdProductDto'
      productId:
        example: 1
        type: integer
      startAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      state:
        example: FL
        type: string
    type: object
  admin_event_controller.StockDto:
    properties:
      id:
        example: 1
        type: integer
      minQty:
        example: 50
        type: integer
      productId:
        example: 1
        type: integer
      qty:
        example: 100
        minimum: 1
        type: integer
    required:
    - qty
    type: object
  admin_event_controller.UpdateRequestDto:
    properties:
      city:
        example: Orlando
        type: string
      endAt:
        example: "2024-01-10T00:00:00Z"
        type: string
      location:
        example: Disney
        type: string
      product:
        $ref: '#/definitions/admin_product_controller.UpdateRequestDto'
      startAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      state:
        example: FL
        type: string
    type: object
  admin_gateway_controller.CreatePaymentTypeResDTO:
    properties:
      gatewayId:
        example: 1
        type: integer
      gatewayPaymentTypeId:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
    type: object
  admin_gateway_controller.CreateReqDTO:
    properties:
      active:
        example: true
        type: boolean
      adqCode3ds:
        example: "123456"
        type: string
      authType:
        enum:
        - bearer
        - basic
        example: bearer
        type: string
      clientId:
        example: ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q
        type: string
      clientSecret:
        example: 52caa7c6-d107-42bd-afac-0226a501e66e
        type: string
      defaultAdqCode:
        example: "654321"
        type: string
      description:
        example: Payment gateway for Stripe
        type: string
      gatewayProcessId:
        example: 1
        minimum: 1
        type: integer
      name:
        example: Stripe
        minLength: 3
        type: string
      notifPassword:
        example: notification_password
        type: string
      notifUser:
        example: notification_user
        type: string
      order:
        example: 1
        minimum: 0
        type: integer
      paymentTypes:
        example:
        - 1
        - 2
        items:
          type: integer
        minItems: 1
        type: array
      softDescriptor:
        example: Company Name
        type: string
      testEnvironment:
        example: false
        type: boolean
      url:
        example: https://api.stripe.com
        type: string
      use3ds:
        example: false
        type: boolean
      useAntifraud:
        example: true
        type: boolean
      webhookUrl:
        example: https://example.com/webhook
        type: string
    required:
    - authType
    - gatewayProcessId
    - name
    - order
    - paymentTypes
    type: object
  admin_gateway_controller.CreateResDTO:
    properties:
      active:
        example: true
        type: boolean
      adqCode3ds:
        example: "123456"
        type: string
      authType:
        example: bearer
        type: string
      clientId:
        example: ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q
        type: string
      clientSecret:
        example: 52caa7c6-d107-42bd-afac-0226a501e66e
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      defaultAdqCode:
        example: "654321"
        type: string
      description:
        example: Payment gateway for Stripe
        type: string
      gatewayProcessId:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      isDeleted:
        example: false
        type: boolean
      name:
        example: Stripe
        type: string
      notifPassword:
        example: notification_password
        type: string
      notifUser:
        example: notification_user
        type: string
      order:
        example: 1
        type: integer
      paymentTypes:
        items:
          $ref: '#/definitions/admin_gateway_controller.CreatePaymentTypeResDTO'
        type: array
      softDescriptor:
        example: Company Name
        type: string
      testEnvironment:
        example: false
        type: boolean
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      url:
        example: https://api.stripe.com
        type: string
      use3ds:
        example: false
        type: boolean
      useAntifraud:
        example: true
        type: boolean
      uuid:
        example: 78e5259f-1b4e-460c-90d2-83e640a7d024
        type: string
      webhookUrl:
        example: https://example.com/webhook
        type: string
    type: object
  admin_gateway_controller.GatewayPaymentTypesDTO:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Installment
        type: string
    type: object
  admin_gateway_controller.GatewayProcessDTO:
    properties:
      id:
        example: 2
        type: integer
      name:
        example: Authorize Only
        type: string
    type: object
  admin_gateway_controller.GetAllResDTO:
    properties:
      active:
        example: true
        type: boolean
      adqCode3ds:
        example: "123456"
        type: string
      authType:
        example: bearer
        type: string
      clientId:
        example: ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q
        type: string
      clientSecret:
        example: 52caa7c6-d107-42bd-afac-0226a501e66e
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      defaultAdqCode:
        example: "654321"
        type: string
      description:
        example: Payment gateway for Stripe
        type: string
      gatewayPaymentTypes:
        items:
          $ref: '#/definitions/admin_gateway_controller.GatewayPaymentTypesDTO'
        type: array
      gatewayProcess:
        $ref: '#/definitions/admin_gateway_controller.GatewayProcessDTO'
      gatewayProcessId:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: Stripe
        type: string
      notifPassword:
        example: notification_password
        type: string
      notifUser:
        example: notification_user
        type: string
      order:
        example: 1
        type: integer
      softDescriptor:
        example: Company Name
        type: string
      testEnvironment:
        example: false
        type: boolean
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      url:
        example: https://api.stripe.com
        type: string
      use3ds:
        example: false
        type: boolean
      useAntifraud:
        example: true
        type: boolean
      uuid:
        example: 78e5259f-1b4e-460c-90d2-83e640a7d024
        type: string
      webhookUrl:
        example: https://example.com/webhook
        type: string
    type: object
  admin_gateway_controller.GetOneByIdResDTO:
    properties:
      active:
        example: true
        type: boolean
      adqCode3ds:
        example: "123456"
        type: string
      authType:
        example: bearer
        type: string
      clientId:
        example: ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q
        type: string
      clientSecret:
        example: 52caa7c6-d107-42bd-afac-0226a501e66e
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      defaultAdqCode:
        example: "654321"
        type: string
      description:
        example: Payment gateway for Stripe
        type: string
      gatewayPaymentTypes:
        items:
          $ref: '#/definitions/admin_gateway_controller.GatewayPaymentTypesDTO'
        type: array
      gatewayProcess:
        $ref: '#/definitions/admin_gateway_controller.GatewayProcessDTO'
      gatewayProcessId:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: Stripe
        type: string
      notifPassword:
        example: notification_password
        type: string
      notifUser:
        example: notification_user
        type: string
      order:
        example: 1
        type: integer
      softDescriptor:
        example: Company Name
        type: string
      testEnvironment:
        example: false
        type: boolean
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      url:
        example: https://api.stripe.com
        type: string
      use3ds:
        example: false
        type: boolean
      useAntifraud:
        example: true
        type: boolean
      uuid:
        example: 78e5259f-1b4e-460c-90d2-83e640a7d024
        type: string
      webhookUrl:
        example: https://example.com/webhook
        type: string
    type: object
  admin_gateway_controller.UpdateReqDTO:
    properties:
      active:
        example: true
        type: boolean
      adqCode3ds:
        example: "123456"
        type: string
      authType:
        enum:
        - bearer
        - basic
        example: bearer
        type: string
      clientId:
        example: ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q
        type: string
      clientSecret:
        example: 52caa7c6-d107-42bd-afac-0226a501e66e
        type: string
      defaultAdqCode:
        example: "654321"
        type: string
      description:
        example: Payment gateway for Stripe
        type: string
      gatewayProcessId:
        example: 1
        minimum: 1
        type: integer
      name:
        example: Stripe
        minLength: 3
        type: string
      notifPassword:
        example: notification_password
        type: string
      notifUser:
        example: notification_user
        type: string
      order:
        example: 1
        minimum: 0
        type: integer
      softDescriptor:
        example: Company Name
        type: string
      testEnvironment:
        example: false
        type: boolean
      url:
        example: https://api.stripe.com
        type: string
      use3ds:
        example: false
        type: boolean
      useAntifraud:
        example: true
        type: boolean
      webhookUrl:
        example: https://example.com/webhook
        type: string
    required:
    - authType
    - gatewayProcessId
    - name
    - order
    type: object
  admin_product_controller.CategoryResponseDto:
    properties:
      description:
        example: EVENT
        type: string
      id:
        example: 3
        type: integer
      name:
        example: event
        type: string
    type: object
  admin_product_controller.CreateInstallmentsRequestDto:
    properties:
      fee:
        type: number
      id:
        example: 1
        type: integer
      paymentTypeId:
        type: integer
      tariff:
        example: 2.3
        type: number
    required:
    - id
    - paymentTypeId
    type: object
  admin_product_controller.CreateInstallmentsResponseDto:
    properties:
      fee:
        example: 1.5
        type: number
      id:
        example: 1
        type: integer
      installmentId:
        example: 1
        type: integer
      paymentTypeId:
        example: 1
        type: integer
      tariff:
        example: 2.3
        type: number
    type: object
  admin_product_controller.CreateRequestDto:
    properties:
      active:
        example: true
        type: boolean
      categoryId:
        example: 3
        minimum: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        maxLength: 2000
        type: string
      discountPrice:
        example: 4.99
        type: number
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        maxLength: 2000
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        maxLength: 2000
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        maxLength: 2000
        type: string
      installments:
        items:
          $ref: '#/definitions/admin_product_controller.CreateInstallmentsRequestDto'
        minItems: 1
        type: array
      name:
        example: Red Hot Chilly Peppers
        maxLength: 255
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_product_controller.CreateStockRequestDto'
    required:
    - categoryId
    - image
    - imageMobile
    - imageThumbnail
    - installments
    - name
    - price
    type: object
  admin_product_controller.CreateResponseDto:
    properties:
      active:
        example: true
        type: boolean
      categoryId:
        example: 3
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      installments:
        items:
          $ref: '#/definitions/admin_product_controller.CreateInstallmentsResponseDto'
        type: array
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_product_controller.CreateStockResponseDto'
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_product_controller.CreateStockRequestDto:
    properties:
      minQty:
        example: 50
        type: integer
      qty:
        example: 100
        minimum: 1
        type: integer
    required:
    - qty
    type: object
  admin_product_controller.CreateStockResponseDto:
    properties:
      id:
        example: 1
        type: integer
      minQty:
        example: 50
        type: integer
      productId:
        example: 1
        type: integer
      qty:
        example: 100
        minimum: 1
        type: integer
    required:
    - qty
    type: object
  admin_product_controller.GetAllResponseDto:
    properties:
      active:
        example: true
        type: boolean
      categoryId:
        example: 3
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_product_controller.GetAllWithRelationsResponseDto:
    properties:
      active:
        example: true
        type: boolean
      category:
        $ref: '#/definitions/admin_product_controller.CategoryResponseDto'
      categoryId:
        example: 3
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      installments:
        $ref: '#/definitions/admin_product_controller.InstallmentsResponseDto'
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_product_controller.StockResponseDto'
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_product_controller.GetOneByIdResponseDto:
    properties:
      active:
        example: true
        type: boolean
      category:
        $ref: '#/definitions/admin_product_controller.CategoryResponseDto'
      categoryId:
        example: 3
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_product_controller.StockResponseDto'
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_product_controller.GetOneByUuidResponseDto:
    properties:
      active:
        example: true
        type: boolean
      category:
        $ref: '#/definitions/admin_product_controller.CategoryResponseDto'
      categoryId:
        example: 3
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      createdBy:
        example: 1
        type: integer
      description:
        example: Fresh and fiery red hot chilly peppers, perfect for adding a spicy
          kick to your dishes.
        type: string
      discountPrice:
        example: 4.99
        type: number
      id:
        example: 1
        type: integer
      image:
        example: https://example.com/images/red-hot-chilly-peppers.jpg
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.jpg
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.jpg
        type: string
      isDeleted:
        example: false
        type: boolean
      name:
        example: Red Hot Chilly Peppers
        type: string
      price:
        example: 5.99
        type: number
      stock:
        $ref: '#/definitions/admin_product_controller.StockResponseDto'
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      updatedBy:
        example: 1
        type: integer
      uuid:
        example: 998f91f3-4dd7-419d-a543-0d26a0e945ec
        type: string
    type: object
  admin_product_controller.InstallmentsResponseDto:
    properties:
      creditcard:
        items:
          $ref: '#/definitions/admin_product_controller.PaymentTypeInstallment'
        type: array
      paymentSlip:
        items:
          $ref: '#/definitions/admin_product_controller.PaymentTypeInstallment'
        type: array
      pix:
        items:
          $ref: '#/definitions/admin_product_controller.PaymentTypeInstallment'
        type: array
    type: object
  admin_product_controller.PaymentTypeInstallment:
    properties:
      fee:
        example: 3.22
        type: number
      installmentTimeId:
        example: 1
        type: integer
      installmentTimeName:
        example: 1x
        type: string
      tariff:
        example: 7
        type: number
    type: object
  admin_product_controller.StockResponseDto:
    properties:
      id:
        example: 1
        type: integer
      minQty:
        example: 50
        type: integer
      productId:
        example: 1
        type: integer
      qty:
        example: 100
        minimum: 1
        type: integer
    required:
    - qty
    type: object
  admin_product_controller.UpdateInstallmentsRequestDto:
    properties:
      fee:
        type: number
      id:
        example: 1
        type: integer
      paymentTypeId:
        type: integer
      tariff:
        example: 2.3
        type: number
    required:
    - id
    - paymentTypeId
    type: object
  admin_product_controller.UpdateRequestDto:
    properties:
      active:
        example: false
        type: boolean
      categoryId:
        example: 1
        minimum: 1
        type: integer
      description:
        example: Update Fresh and fiery red hot chilly peppers, perfect for adding
          a spicy kick to your dishes.
        maxLength: 2000
        type: string
      discountPrice:
        example: 5.11
        type: number
      image:
        example: https://example.com/images/red-hot-chilly-peppers.png
        maxLength: 2000
        type: string
      imageMobile:
        example: https://example.com/images/red-hot-chilly-peppers-mobile.png
        maxLength: 2000
        type: string
      imageThumbnail:
        example: https://example.com/images/red-hot-chilly-peppers-thumbnail.png
        maxLength: 2000
        type: string
      installments:
        items:
          $ref: '#/definitions/admin_product_controller.UpdateInstallmentsRequestDto'
        minItems: 1
        type: array
      name:
        example: Update Red Hot Chilly Peppers
        maxLength: 255
        type: string
      price:
        example: 6.11
        type: number
    required:
    - categoryId
    - image
    - imageMobile
    - imageThumbnail
    - installments
    - name
    - price
    type: object
  admin_user_controller.CreateRequestDto:
    properties:
      email:
        example: adminjohndoe@gmail.com
        type: string
      firstName:
        example: Admin John
        maxLength: 50
        minLength: 3
        type: string
      lastName:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: "123456"
        maxLength: 1000
        minLength: 6
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  admin_user_controller.CreateResponseDto:
    properties:
      createdAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
      email:
        example: adminjohndoe@gmail.com
        type: string
      firstName:
        example: Admin John
        maxLength: 50
        minLength: 3
        type: string
      id:
        example: 2
        type: integer
      lastName:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      role:
        example: admin
        type: string
      updatedAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
    required:
    - email
    - firstName
    - lastName
    type: object
  admin_user_controller.GetAllResponseDto:
    properties:
      createdAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
      email:
        example: johndoe@gmail.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      role:
        example: admin
        type: string
      updatedAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
    type: object
  admin_user_controller.GetOneByEmailRequestDto:
    properties:
      email:
        example: adminjohndoe@gmail.com
        type: string
    required:
    - email
    type: object
  admin_user_controller.GetOneByEmailResponseDto:
    properties:
      createdAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
      email:
        example: adminjohndoe@gmail.com
        type: string
      firstName:
        example: Admin John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      role:
        example: admin
        type: string
      updatedAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
    type: object
  admin_user_controller.GetOneByIdResponseDto:
    properties:
      createdAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
      email:
        example: adminjohndoe@gmail.com
        type: string
      firstName:
        example: Admin John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      role:
        example: admin
        type: string
      updatedAt:
        example: "2024-06-29T06:29:44.999929Z"
        type: string
    type: object
  admin_user_controller.UpdateRequestDto:
    properties:
      email:
        example: adminjohndoe@gmail.com
        type: string
      firstName:
        example: Admin John
        maxLength: 50
        minLength: 3
        type: string
      lastName:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      role:
        enum:
        - admin
        - user
        - webservice
        type: string
    required:
    - email
    - firstName
    - lastName
    - role
    type: object
  auth_controller.SignInRequestDto:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      password:
        example: "123456"
        type: string
    required:
    - email
    - password
    type: object
  auth_controller.SignInResponseDto:
    properties:
      code:
        example: 200
        type: integer
      expire:
        example: "2024-06-30T20:46:13-03:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk3OTExNzMsImlkIjozLCJvcmlnX2lhdCI6MTcxOTcwNDc3Mywicm9sZSI6InVzZXIifQ.c8HuyRAxgNDC4FavwQ_mv-qWOm4Ch6--1-kSQEmK4x0
        type: string
    type: object
  creditcard_controller.CreateRequestDto:
    properties:
      creditcardFlagId:
        example: 1
        minimum: 1
        type: integer
      creditcardTypeId:
        example: 1
        minimum: 1
        type: integer
      expiration:
        example: "2025-01-01T00:00:00Z"
        type: string
      name:
        example: Testing
        type: string
      notifyExpiration:
        example: true
        type: boolean
      number:
        example: "5574723384289379"
        minLength: 8
        type: string
      priority:
        example: 1
        type: integer
    required:
    - creditcardFlagId
    - creditcardTypeId
    - expiration
    - name
    - number
    type: object
  creditcard_controller.CreateResponseDto:
    properties:
      createdAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      creditcardFlagId:
        example: 1
        minimum: 1
        type: integer
      creditcardTypeId:
        example: 1
        minimum: 1
        type: integer
      expiration:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      isDeleted:
        example: false
        type: boolean
      name:
        example: Testing
        type: string
      notifyExpiration:
        example: true
        type: boolean
      number:
        example: "5574723384289379"
        minLength: 8
        type: string
      priority:
        example: 1
        type: integer
      updatedAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      userId:
        example: 1
        type: integer
      uuid:
        example: 767c1587-1ade-4e6a-a9fe-f0e07c83bda9
        type: string
    required:
    - creditcardFlagId
    - creditcardTypeId
    - expiration
    - name
    - number
    type: object
  creditcard_controller.CreditcardFlag:
    properties:
      description:
        example: VISA
        type: string
      id:
        example: 2
        type: integer
      name:
        example: visa
        type: string
      regex:
        example: '''^4d{5}'''
        type: string
    type: object
  creditcard_controller.CreditcardType:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Credit
        type: string
    type: object
  creditcard_controller.GetAllUserCreditcardsResponseDto:
    properties:
      createdAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      creditcardFlag:
        $ref: '#/definitions/creditcard_controller.CreditcardFlag'
      creditcardType:
        $ref: '#/definitions/creditcard_controller.CreditcardType'
      expiration:
        example: "2025-01-01T00:00:00Z"
        type: string
      name:
        example: Testing
        type: string
      number:
        example: "5574723384289379"
        minLength: 8
        type: string
      userId:
        example: 1
        type: integer
      uuid:
        example: 767c1587-1ade-4e6a-a9fe-f0e07c83bda9
        type: string
    required:
    - expiration
    - name
    - number
    type: object
  creditcard_controller.UpdateRequestDto:
    properties:
      creditcardFlagId:
        example: 2
        minimum: 1
        type: integer
      creditcardTypeId:
        example: 2
        minimum: 1
        type: integer
      expiration:
        example: "2025-01-01T00:00:00Z"
        type: string
      name:
        example: Testing Update
        type: string
      notifyExpiration:
        example: true
        type: boolean
      number:
        example: "6643213384289379"
        minLength: 8
        type: string
      priority:
        example: 2
        type: integer
    required:
    - creditcardFlagId
    - creditcardTypeId
    - expiration
    - name
    - number
    type: object
  exception.HttpException:
    properties:
      message:
        example: Invalid path parameter
        type: string
      statusCode:
        example: 400
        type: integer
    type: object
  middleware.AuthenticationError:
    properties:
      message:
        example: Access denied
        type: string
      statusCode:
        example: 401
        type: integer
    type: object
  middleware.RolePermissionError:
    properties:
      message:
        example: permission denied.
        type: string
      statusCode:
        example: 403
        type: integer
    type: object
  user_controller.AddressRequestDto:
    properties:
      addressType:
        example: home
        type: string
      city:
        example: Springfield
        type: string
      complement:
        example: Apt 101
        type: string
      country:
        example: USA
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      favorite:
        example: true
        type: boolean
      postalCode:
        example: "12345"
        type: string
      state:
        example: IL
        type: string
      streetAddress:
        example: 123 Main St
        type: string
      updatedAt:
        example: "2023-01-02T00:00:00Z"
        type: string
    type: object
  user_controller.AddressResponseDto:
    properties:
      addressType:
        example: home
        type: string
      city:
        example: Springfield
        type: string
      complement:
        example: Apt 101
        type: string
      country:
        example: USA
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      favorite:
        example: true
        type: boolean
      id:
        example: 1
        type: integer
      postalCode:
        example: "12345"
        type: string
      state:
        example: IL
        type: string
      streetAddress:
        example: 123 Main St
        type: string
      updatedAt:
        example: "2023-01-02T00:00:00Z"
        type: string
      userId:
        example: 1
        type: integer
    type: object
  user_controller.CreateRequestDto:
    properties:
      address:
        $ref: '#/definitions/user_controller.AddressRequestDto'
      email:
        example: johndoe@gmail.com
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
      password:
        example: "123456"
        type: string
      phone:
        $ref: '#/definitions/user_controller.PhoneRequestDto'
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  user_controller.CreateResponseDto:
    properties:
      address:
        $ref: '#/definitions/user_controller.AddressResponseDto'
      email:
        example: johndoe@gmail.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      phone:
        $ref: '#/definitions/user_controller.PhoneResponseDto'
      role:
        example: user
        type: string
    type: object
  user_controller.GetAllResponseDto:
    properties:
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: johndoe@gmail.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      role:
        example: user
        type: string
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  user_controller.GetOneByIdResponseDto:
    properties:
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: johndoe@gmail.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      role:
        example: user
        type: string
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  user_controller.PhoneRequestDto:
    properties:
      ddd:
        example: "021"
        maxLength: 5
        type: string
      number:
        example: "999999999"
        maxLength: 10
        type: string
    required:
    - ddd
    - number
    type: object
  user_controller.PhoneResponseDto:
    properties:
      ddd:
        example: "021"
        type: string
      id:
        example: 1
        type: integer
      number:
        example: "999999999"
        type: string
      userId:
        example: 2
        type: integer
    type: object
  user_controller.UpdateRequestDto:
    properties:
      email:
        example: johndoeupdate@gmail.com
        type: string
      firstName:
        example: John Update
        type: string
      lastName:
        example: Doe update
        type: string
    required:
    - email
    - firstName
    - lastName
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Ticket Sale Support
    url: http://www.swagger.io/support
  description: This is a simple ticket sales application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ticket Sale
  version: "1.0"
paths:
  /admin/auth:
    post:
      consumes:
      - application/json
      description: Sign In
      parameters:
      - description: Sign In
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/admin_auth_controller.SignInRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_auth_controller.SignInResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
      summary: Sign In
      tags:
      - Admin Users
  /admin/events:
    get:
      description: Get all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin_event_controller.GetAllResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get all events
      tags:
      - Admin Event
    post:
      description: Create a event
      parameters:
      - description: New Event
        in: body
        name: Event
        required: true
        schema:
          $ref: '#/definitions/admin_event_controller.CreateRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin_event_controller.CreateResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create a event
      tags:
      - Admin Event
  /admin/events/{id}:
    delete:
      description: Soft Delete a event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Soft Delete a event
      tags:
      - Admin Event
    get:
      description: Get One By Id
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_event_controller.GetOneByIdResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Id
      tags:
      - Admin Event
    put:
      description: Update a event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Event
        in: body
        name: Event
        required: true
        schema:
          $ref: '#/definitions/admin_event_controller.UpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update a event
      tags:
      - Admin Event
  /admin/gateway:
    get:
      description: Get all gateway
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin_gateway_controller.GetAllResDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get all gateway
      tags:
      - Admin Gateway
    post:
      description: Create a gateway
      parameters:
      - description: New Gateway
        in: body
        name: Gateway
        required: true
        schema:
          $ref: '#/definitions/admin_gateway_controller.CreateReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin_gateway_controller.CreateResDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create a gateway
      tags:
      - Admin Gateway
  /admin/gateway/{id}:
    delete:
      description: Soft Delete a gateway
      parameters:
      - description: Gateway ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Soft Delete a gateway
      tags:
      - Admin Gateway
    get:
      description: Get One By Id
      parameters:
      - description: Gateway ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_gateway_controller.GetOneByIdResDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Id
      tags:
      - Admin Gateway
    put:
      description: Update a gateway
      parameters:
      - description: Gateway ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update gateway
        in: body
        name: Gateway
        required: true
        schema:
          $ref: '#/definitions/admin_gateway_controller.UpdateReqDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update a gateway
      tags:
      - Admin Gateway
  /admin/products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin_product_controller.GetAllResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get all products
      tags:
      - Admin Product
    post:
      description: Create a product
      parameters:
      - description: New product
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/admin_product_controller.CreateRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin_product_controller.CreateResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create a product
      tags:
      - Admin Product
  /admin/products/{id}:
    delete:
      description: Soft Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Soft Delete a product
      tags:
      - Admin Product
    get:
      description: Get One By Id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_product_controller.GetOneByIdResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Id
      tags:
      - Admin Product
    put:
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/admin_product_controller.UpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update a product
      tags:
      - Admin Product
  /admin/products/details:
    get:
      description: Get all products with relations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin_product_controller.GetAllWithRelationsResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get all products with relations
      tags:
      - Admin Product
  /admin/products/uuid/{uuid}:
    get:
      description: Get One By UUID
      parameters:
      - description: Product UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_product_controller.GetOneByUuidResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By UUID
      tags:
      - Admin Product
  /admin/users:
    get:
      description: Get All Admin Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin_user_controller.GetAllResponseDto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get All
      tags:
      - Admin Users
    post:
      description: Create an admin user
      parameters:
      - description: New Admin User
        in: body
        name: AdminUser
        required: true
        schema:
          $ref: '#/definitions/admin_user_controller.CreateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_user_controller.CreateResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create An Admin User
      tags:
      - Admin Users
  /admin/users/{id}:
    delete:
      description: Delete an admin user
      parameters:
      - description: Admin User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Delete An Admin User
      tags:
      - Admin Users
    get:
      description: Get one admin user by id
      parameters:
      - description: Admin User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_user_controller.GetOneByIdResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Id
      tags:
      - Admin Users
    put:
      description: Update an admin user
      parameters:
      - description: Update Admin User
        in: body
        name: AdminUser
        required: true
        schema:
          $ref: '#/definitions/admin_user_controller.UpdateRequestDto'
      - description: Admin User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update An Admin User
      tags:
      - Admin Users
  /admin/users/get-by-email:
    post:
      description: Get one admin user by email
      parameters:
      - description: Admin User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/admin_user_controller.GetOneByEmailRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_user_controller.GetOneByEmailResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Email
      tags:
      - Admin Users
  /auth:
    post:
      consumes:
      - application/json
      description: Sign In
      parameters:
      - description: Sign In
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/auth_controller.SignInRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth_controller.SignInResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
      summary: Sign In
      tags:
      - Users
  /creditcard:
    post:
      description: Create a Creditcard
      parameters:
      - description: New Creditcard
        in: body
        name: Creditcard
        required: true
        schema:
          $ref: '#/definitions/creditcard_controller.CreateRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/creditcard_controller.CreateResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create a Creditcard
      tags:
      - Creditcard
  /creditcard/{uuid}:
    delete:
      description: Soft Delete a creditcard
      parameters:
      - description: Creditcard UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Soft Delete a creditcard
      tags:
      - Creditcard
    put:
      description: Update a creditcard
      parameters:
      - description: Creditcard UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Update Creditcard
        in: body
        name: Creditcard
        required: true
        schema:
          $ref: '#/definitions/creditcard_controller.UpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update a creditcard
      tags:
      - Creditcard
  /creditcard/user:
    get:
      description: Get all user creditcards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/creditcard_controller.GetAllUserCreditcardsResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get all user creditcards
      tags:
      - Creditcard
  /users:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user_controller.GetAllResponseDto'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get All
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create an new User
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_controller.CreateRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user_controller.CreateResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Create
      tags:
      - Users
  /users/{id}:
    get:
      description: Get one user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_controller.GetOneByIdResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Get One By Id
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_controller.UpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.AuthenticationError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.RolePermissionError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.HttpException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.HttpException'
      summary: Update An User
      tags:
      - Users
swagger: "2.0"
