// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_addresses_query.sql

package user_address_connection

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO users_addresses
(user_id, street_address, city, complement, state, postal_code, country, address_type, favorite)
VALUES 
($1, $2, $3, $4, $5, $6, $7, $8, $9) 
RETURNING id, user_id, street_address, city, complement, state, postal_code, country, address_type, favorite, created_at, updated_at
`

type CreateParams struct {
	UserID        int32   `json:"userId"`
	StreetAddress string  `json:"streetAddress"`
	City          string  `json:"city"`
	Complement    *string `json:"complement"`
	State         string  `json:"state"`
	PostalCode    *string `json:"postalCode"`
	Country       string  `json:"country"`
	AddressType   *string `json:"addressType"`
	Favorite      *bool   `json:"favorite"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (UsersAddress, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.StreetAddress,
		arg.City,
		arg.Complement,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.AddressType,
		arg.Favorite,
	)
	var i UsersAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.Complement,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.AddressType,
		&i.Favorite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE users_addresses
SET 
    street_address = $2,
    city = $3,
    complement = $4,
    state = $5,
    postal_code = $6,
    country = $7,
    address_type = $8,
    favorite = $9
WHERE id = $1
`

type UpdateParams struct {
	ID            int32   `json:"id"`
	StreetAddress string  `json:"streetAddress"`
	City          string  `json:"city"`
	Complement    *string `json:"complement"`
	State         string  `json:"state"`
	PostalCode    *string `json:"postalCode"`
	Country       string  `json:"country"`
	AddressType   *string `json:"addressType"`
	Favorite      *bool   `json:"favorite"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.StreetAddress,
		arg.City,
		arg.Complement,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.AddressType,
		arg.Favorite,
	)
	return err
}
