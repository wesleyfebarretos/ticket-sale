// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gateway_customer_query.sql

package gateway_customer_connection

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO fin.gateway_customer
(user_id, gateway_id, gateway_customer_id)
VALUES
($1, $2, $3)
RETURNING user_id, gateway_id, gateway_customer_id, created_at, updated_at
`

type CreateParams struct {
	UserID            int32  `json:"userId"`
	GatewayID         int32  `json:"gatewayId"`
	GatewayCustomerID string `json:"gatewayCustomerId"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (FinGatewayCustomer, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.GatewayID, arg.GatewayCustomerID)
	var i FinGatewayCustomer
	err := row.Scan(
		&i.UserID,
		&i.GatewayID,
		&i.GatewayCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOneByGatewayAndCustomerId = `-- name: FindOneByGatewayAndCustomerId :one
SELECT
    user_id, gateway_id, gateway_customer_id, created_at, updated_at
FROM
    fin.gateway_customer
WHERE
    user_id = $1
AND
    gateway_id = $2
`

type FindOneByGatewayAndCustomerIdParams struct {
	UserID    int32 `json:"userId"`
	GatewayID int32 `json:"gatewayId"`
}

func (q *Queries) FindOneByGatewayAndCustomerId(ctx context.Context, arg FindOneByGatewayAndCustomerIdParams) (FinGatewayCustomer, error) {
	row := q.db.QueryRow(ctx, findOneByGatewayAndCustomerId, arg.UserID, arg.GatewayID)
	var i FinGatewayCustomer
	err := row.Scan(
		&i.UserID,
		&i.GatewayID,
		&i.GatewayCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOneByUserId = `-- name: FindOneByUserId :one
SELECT
    user_id, gateway_id, gateway_customer_id, created_at, updated_at
FROM
    fin.gateway_customer
WHERE
    user_id = $1
`

func (q *Queries) FindOneByUserId(ctx context.Context, userID int32) (FinGatewayCustomer, error) {
	row := q.db.QueryRow(ctx, findOneByUserId, userID)
	var i FinGatewayCustomer
	err := row.Scan(
		&i.UserID,
		&i.GatewayID,
		&i.GatewayCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
