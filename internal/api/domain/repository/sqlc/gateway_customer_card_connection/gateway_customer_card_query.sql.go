// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gateway_customer_card_query.sql

package gateway_customer_card_connection

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO fin.gateway_customer_card
(gateway_id, user_id, card_id, gateway_card_id)
VALUES
($1,$2,$3,$4)
RETURNING id, gateway_id, user_id, card_id, gateway_card_id, created_at, updated_at
`

type CreateParams struct {
	GatewayID     int32  `json:"gatewayId"`
	UserID        int32  `json:"userId"`
	CardID        int32  `json:"cardId"`
	GatewayCardID string `json:"gatewayCardId"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (FinGatewayCustomerCard, error) {
	row := q.db.QueryRow(ctx, create,
		arg.GatewayID,
		arg.UserID,
		arg.CardID,
		arg.GatewayCardID,
	)
	var i FinGatewayCustomerCard
	err := row.Scan(
		&i.ID,
		&i.GatewayID,
		&i.UserID,
		&i.CardID,
		&i.GatewayCardID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByUserAndGatewayId = `-- name: GetByUserAndGatewayId :many
SELECT
    id,
    gateway_id,
    user_id,
    card_id,
    gateway_card_id
FROM 
    fin.gateway_customer_card
WHERE 
    user_id = $1
AND
    gateway_id = $2
`

type GetByUserAndGatewayIdParams struct {
	UserID    int32 `json:"userId"`
	GatewayID int32 `json:"gatewayId"`
}

type GetByUserAndGatewayIdRow struct {
	ID            int32  `json:"id"`
	GatewayID     int32  `json:"gatewayId"`
	UserID        int32  `json:"userId"`
	CardID        int32  `json:"cardId"`
	GatewayCardID string `json:"gatewayCardId"`
}

func (q *Queries) GetByUserAndGatewayId(ctx context.Context, arg GetByUserAndGatewayIdParams) ([]GetByUserAndGatewayIdRow, error) {
	rows, err := q.db.Query(ctx, getByUserAndGatewayId, arg.UserID, arg.GatewayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetByUserAndGatewayIdRow{}
	for rows.Next() {
		var i GetByUserAndGatewayIdRow
		if err := rows.Scan(
			&i.ID,
			&i.GatewayID,
			&i.UserID,
			&i.CardID,
			&i.GatewayCardID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
