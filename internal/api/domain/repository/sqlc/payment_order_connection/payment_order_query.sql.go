// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment_order_query.sql

package payment_order_connection

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cancel = `-- name: Cancel :exec
UPDATE fin.payment_order
SET
    payment_status_id = 5,
    cancel_at = $2,
    updated_by = $3,
    updated_at = $4
WHERE
    uuid = $1
`

type CancelParams struct {
	Uuid      uuid.UUID  `json:"uuid"`
	CancelAt  *time.Time `json:"cancelAt"`
	UpdatedBy *int32     `json:"updatedBy"`
	UpdatedAt time.Time  `json:"updatedAt"`
}

func (q *Queries) Cancel(ctx context.Context, arg CancelParams) error {
	_, err := q.db.Exec(ctx, cancel,
		arg.Uuid,
		arg.CancelAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const create = `-- name: Create :one
INSERT INTO fin.payment_order (
    creditcard_uuid,
    user_id,
    total_price,
    payment_type_id,
    installment_time_id,
    gateway_id,
    payment_status_id,
    total_price,
    added_value,
    base_value,
    created_by,
    updated_by
)
VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, uuid, creditcard_uuid, user_id, total_price, payment_type_id, installment_time_id, gateway_id, payment_status_id, payment_cancel_reason_id, extra_info, payment_at, cancel_at, due_at, expiration_at, base_value, reversed_value, canceled_value, added_value, total_value, created_by, updated_by, created_at, updated_at
`

type CreateParams struct {
	CreditcardUuid    *uuid.UUID `json:"creditcardUuid"`
	UserID            int32      `json:"userId"`
	TotalPrice        float64    `json:"totalPrice"`
	PaymentTypeID     int32      `json:"paymentTypeId"`
	InstallmentTimeID int32      `json:"installmentTimeId"`
	GatewayID         int32      `json:"gatewayId"`
	PaymentStatusID   int32      `json:"paymentStatusId"`
	TotalPrice_2      float64    `json:"totalPrice2"`
	AddedValue        float64    `json:"addedValue"`
	BaseValue         float64    `json:"baseValue"`
	CreatedBy         int32      `json:"createdBy"`
	UpdatedBy         *int32     `json:"updatedBy"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (FinPaymentOrder, error) {
	row := q.db.QueryRow(ctx, create,
		arg.CreditcardUuid,
		arg.UserID,
		arg.TotalPrice,
		arg.PaymentTypeID,
		arg.InstallmentTimeID,
		arg.GatewayID,
		arg.PaymentStatusID,
		arg.TotalPrice_2,
		arg.AddedValue,
		arg.BaseValue,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i FinPaymentOrder
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreditcardUuid,
		&i.UserID,
		&i.TotalPrice,
		&i.PaymentTypeID,
		&i.InstallmentTimeID,
		&i.GatewayID,
		&i.PaymentStatusID,
		&i.PaymentCancelReasonID,
		&i.ExtraInfo,
		&i.PaymentAt,
		&i.CancelAt,
		&i.DueAt,
		&i.ExpirationAt,
		&i.BaseValue,
		&i.ReversedValue,
		&i.CanceledValue,
		&i.AddedValue,
		&i.TotalValue,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneByUuid = `-- name: GetOneByUuid :one
SELECT id, uuid, creditcard_uuid, user_id, total_price, payment_type_id, installment_time_id, gateway_id, payment_status_id, payment_cancel_reason_id, extra_info, payment_at, cancel_at, due_at, expiration_at, base_value, reversed_value, canceled_value, added_value, total_value, created_by, updated_by, created_at, updated_at FROM fin.payment_order WHERE uuid = $1
`

func (q *Queries) GetOneByUuid(ctx context.Context, argUuid uuid.UUID) (FinPaymentOrder, error) {
	row := q.db.QueryRow(ctx, getOneByUuid, argUuid)
	var i FinPaymentOrder
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreditcardUuid,
		&i.UserID,
		&i.TotalPrice,
		&i.PaymentTypeID,
		&i.InstallmentTimeID,
		&i.GatewayID,
		&i.PaymentStatusID,
		&i.PaymentCancelReasonID,
		&i.ExtraInfo,
		&i.PaymentAt,
		&i.CancelAt,
		&i.DueAt,
		&i.ExpirationAt,
		&i.BaseValue,
		&i.ReversedValue,
		&i.CanceledValue,
		&i.AddedValue,
		&i.TotalValue,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
