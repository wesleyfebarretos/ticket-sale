// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package admin_gateway_connection

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v4"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createPaymentTypes = `-- name: CreatePaymentTypes :batchone
INSERT INTO fin.gateway_payment_type_association
    (gateway_id, gateway_payment_type_id, created_by, updated_by)
VALUES
    ($1,$2,$3,$4)
RETURNING  id, gateway_id, gateway_payment_type_id, created_by, updated_by, created_at, updated_at
`

type CreatePaymentTypesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreatePaymentTypesParams struct {
	GatewayID            int32  `json:"gatewayId"`
	GatewayPaymentTypeID int32  `json:"gatewayPaymentTypeId"`
	CreatedBy            int32  `json:"createdBy"`
	UpdatedBy            *int32 `json:"updatedBy"`
}

func (q *Queries) CreatePaymentTypes(ctx context.Context, arg []CreatePaymentTypesParams) *CreatePaymentTypesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.GatewayID,
			a.GatewayPaymentTypeID,
			a.CreatedBy,
			a.UpdatedBy,
		}
		batch.Queue(createPaymentTypes, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreatePaymentTypesBatchResults{br, len(arg), false}
}

func (b *CreatePaymentTypesBatchResults) QueryRow(f func(int, FinGatewayPaymentTypeAssociation, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i FinGatewayPaymentTypeAssociation
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.GatewayID,
			&i.GatewayPaymentTypeID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *CreatePaymentTypesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
