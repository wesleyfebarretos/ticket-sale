// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package admin_product_connection

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v4"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createInstallments = `-- name: CreateInstallments :batchone
INSERT INTO fin.product_payment_type_installment_time
    (product_id, payment_type_id, installment_time_id, fee, tariff, created_by)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING
    id, product_id, payment_type_id, installment_time_id, fee, tariff, created_by, updated_by, created_at, updated_at
`

type CreateInstallmentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateInstallmentsParams struct {
	ProductID         int32   `json:"productId"`
	PaymentTypeID     int32   `json:"paymentTypeId"`
	InstallmentTimeID int32   `json:"installmentTimeId"`
	Fee               float64 `json:"fee"`
	Tariff            float64 `json:"tariff"`
	CreatedBy         int32   `json:"createdBy"`
}

func (q *Queries) CreateInstallments(ctx context.Context, arg []CreateInstallmentsParams) *CreateInstallmentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ProductID,
			a.PaymentTypeID,
			a.InstallmentTimeID,
			a.Fee,
			a.Tariff,
			a.CreatedBy,
		}
		batch.Queue(createInstallments, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateInstallmentsBatchResults{br, len(arg), false}
}

func (b *CreateInstallmentsBatchResults) QueryRow(f func(int, FinProductPaymentTypeInstallmentTime, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i FinProductPaymentTypeInstallmentTime
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.ProductID,
			&i.PaymentTypeID,
			&i.InstallmentTimeID,
			&i.Fee,
			&i.Tariff,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *CreateInstallmentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
